{"ast":null,"code":"var _jsxFileName = \"/home/csgarciamartinez/Telar/telar-client/src/Jugador.js\";\nimport { io } from 'socket.io-client';\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './jugador.css';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport Tablero from './Tablero';\nimport Ficha from './Ficha'; //todo (less urgent) lots of refactoring, see if I can eliminate a lot of the\n// \"mirroring\" going on in componentdidupdate, why dont i just use props \n// from the source? \n//TODO WHEN REFACTORING: Instead of having a text field that users can input anything into,\n// have the game generate a random hex code you can send to your friends, and limit\n// number of characters they can enter into the enter nbox \n//TODO (extreeeeemely low priority): spectator mode\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Canasta(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"canasta\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fichas\",\n      children: props.fichas\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Canasta;\n\nfunction Basura(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"basura\",\n    onClick: () => props.tirarFicha(props.ficha),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fichas\",\n      children: props.fichas\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n} // Will store information on currently selected subset, eventually \n// also player order\n\n\n_c2 = Basura;\n\nclass Jugador extends React.Component {\n  constructor(props) {\n    console.log(\"Construyendo el jugador ...\");\n    super(props); //Canasta \n\n    const enCanasta = [];\n    const jugador = this.props.sala[\"usuarios\"][this.props.jugador];\n\n    for (const ficha in jugador[\"canasta\"]) {\n      enCanasta.push(jugador[\"canasta\"][ficha]);\n    } //Columnas \n\n\n    const columnas = Array(5);\n    columnas[0] = Array(3).fill(null);\n    columnas[1] = Array(2).fill(null);\n    columnas[2] = Array(1).fill(null);\n    columnas[3] = Array(2).fill(null);\n    columnas[4] = Array(3).fill(null);\n    this.state = {\n      fichaElegida: null,\n      fichasEnCanasta: enCanasta,\n      tablero: Array(25).fill(null),\n      basura: [],\n      cols: columnas,\n      subset: [] // Si concuerda con cualquier cosa en el subconjunto\n\n    };\n  } //TODO: REALLY WORRIED ABOUT WHAT HAPPENS SI UN JUGADOR ACABA CON LAS FICHAS\n  //EN SU CANASTA EN LA PRIMERA RONDA, PERO AUN HAY FICHAS EN OTRAS CANASTAS!\n  //PROBABLEMENTE SE SOLUCIONE CON UN \"PLAYER TURN\" \n\n\n  hacerJugada() {\n    const usuario = this.props.sala[\"usuarios\"][this.props.jugador][\"usuario\"];\n\n    if (this.state.fichasEnCanasta.length) {\n      console.log(\"Haciendo jugada ...\");\n      this.props.hacerJugada(this.state);\n    } else {\n      // Si no quedan fichas en canasta pero el otro si tiene \n      for (const u in this.props.sala[\"usuarios\"]) {\n        if (this.props.sala[\"usuarios\"][u][\"usuario\"] != usuario && this.props.sala[\"usuarios\"][u][\"canasta\"].length) {\n          console.log(\"Haciendo jugada ...\");\n          this.props.hacerJugada(this.state);\n          return;\n        }\n      }\n\n      this.props.acabarRonda(this.state);\n      console.log(\"Se acabo la ronda ... \");\n    }\n  } //TODO: Refactor this, get it out of here\n  //TODO: REALLY WORRIED ABOUT WHAT HAPPENS SI UN JUGADOR ACABA CON LAS FICHAS\n  //EN SU CANASTA EN LA PRIMERA RONDA, PERO AUN HAY FICHAS EN OTRAS CANASTAS!\n  //PROBABLEMENTE SE SOLUCIONE CON UN \"PLAYER TURN\" \n  //TODO: RERENDERING TABLERO EVEN WHEN I DON'T HAVE TO, FUCKING STUPID\n  //TODO: make this respond to GAME TURN not to FICHAS CHANGE \n\n\n  componentDidUpdate(prevProps) {\n    console.log(this.props);\n    console.log(prevProps);\n\n    if (this.props.sala[\"local\"] && this.props.activo != prevProps.activo) {\n      console.log(\"Es tu turno!\");\n      const jugador = this.props.sala[\"usuarios\"][this.props.jugador];\n      const enCanasta = [];\n\n      for (const ficha in jugador[\"canasta\"]) {\n        enCanasta.push(jugador[\"canasta\"][ficha]);\n      }\n\n      if (jugador[\"columnas\"]) {\n        this.setState({\n          fichasEnCanasta: enCanasta,\n          subset: [],\n          cols: this.clonar(jugador[\"columnas\"])\n        });\n      }\n\n      if (jugador[\"tablero\"]) {\n        this.setState({\n          tablero: jugador[\"tablero\"].flat()\n        });\n      }\n\n      this.setState({\n        fichasEnCanasta: enCanasta\n      });\n    } else if (this.props.sala[\"turno\"] !== prevProps.sala[\"turno\"]) {\n      console.log(\"Cambio en la sala!\");\n      const jugador = this.props.sala[\"usuarios\"][this.props.jugador];\n      const enCanasta = [];\n\n      for (const ficha in jugador[\"canasta\"]) {\n        enCanasta.push(jugador[\"canasta\"][ficha]);\n      }\n\n      if (jugador[\"columnas\"]) {\n        this.setState({\n          fichasEnCanasta: enCanasta,\n          subset: [],\n          cols: this.clonar(jugador[\"columnas\"])\n        });\n      } else {\n        const columnas = Array(5);\n        columnas[0] = Array(3).fill(null);\n        columnas[1] = Array(2).fill(null);\n        columnas[2] = Array(1).fill(null);\n        columnas[3] = Array(2).fill(null);\n        columnas[4] = Array(3).fill(null);\n        this.setState({\n          fichasEnCanasta: enCanasta,\n          subset: [],\n          cols: columnas\n        });\n      }\n\n      if (jugador[\"tablero\"]) {\n        this.setState({\n          tablero: jugador[\"tablero\"].flat()\n        });\n      }\n\n      if (jugador[\"basura\"]) {\n        this.setState({\n          basura: jugador[\"basura\"]\n        });\n      }\n    }\n  }\n\n  acuerda(ficha) {\n    let subset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.subset;\n    return subset.includes(ficha[\"patron\"]) || subset.includes(ficha[\"color\"]);\n  } //Para clonar las columnas\n\n\n  clonar(arr) {\n    return arr.map(x => Array.isArray(x) ? this.clonar(x) : x);\n  } //Sacar el subconjunto de una columna\n\n\n  getSubset(col) {\n    var fichasKey = this.props.sala[\"fichas\"];\n    console.log(col);\n\n    if (col[0]) {\n      var subset = [fichasKey[col[0]][\"color\"], fichasKey[col[0]][\"patron\"]];\n\n      for (const f in col) {\n        if (col[f]) {\n          if (subset.includes(fichasKey[col[f]][\"color\"])) {\n            if (subset.length > 1 && !subset.includes(fichasKey[col[f]][\"patron\"])) {\n              subset = [fichasKey[col[f]][\"color\"]];\n              console.log(`${subset}`);\n            }\n          } else if (subset.includes(fichasKey[col[f]][\"patron\"])) {\n            subset = [fichasKey[col[f]][\"patron\"]];\n            console.log(`${subset}`);\n          } else {\n            // No deberia occurrir\n            console.error(`Columna ${col} no fue construida bien`);\n            return [];\n          }\n        } else {\n          return subset;\n        }\n      }\n\n      return []; //Esta llena la columna \n    } else {\n      return [];\n    }\n  }\n\n  ponerFicha(col, ficha) {\n    if (ficha) {\n      //Probablemente seria mejor tener un state con el subconjunto actual\n      // de cada columna pero va ser dificil manejarlo por >1 ronda y los subconjuntos \n      //son peque~nos asi que mejor calcularlo cada vez\n      if (!this.state.cols[col][0] || this.acuerda(ficha, this.getSubset(this.state.cols[col]))) {\n        console.log(`Trying to place ${ficha[\"patron\"]}, ${ficha[\"color\"]}`);\n        const len = this.state.cols[col].length;\n        const newCol = this.clonar(this.state.cols);\n        const newCanasta = this.state.fichasEnCanasta.slice();\n        let fil = 0;\n\n        while (fil < len && this.state.cols[col][fil]) {\n          fil++;\n        }\n\n        console.log(`Poniendo en columna ${col}, fila ${fil}`);\n\n        if (fil == len) {\n          // Esta llena la columna\n          console.log(\"Can't place here!\"); //TODO actually show to player\n        } else {\n          const idx = this.props.sala[\"fichas\"].findIndex(x => x === ficha);\n          newCol[col][fil] = idx;\n          console.log(`${newCanasta}`);\n          console.log(`${idx}`);\n          newCanasta.splice(this.state.fichasEnCanasta.findIndex(x => x == idx), 1);\n          console.log(`${newCanasta}`);\n        }\n\n        this.setState({\n          fichaElegida: null,\n          cols: newCol,\n          fichasEnCanasta: newCanasta\n        });\n      } else {\n        console.log(\"Ficha no acuerda con columna o columna esta llena\");\n      }\n    } else {\n      console.log(\"No se selecciono una ficha\");\n    }\n  } // TODO: Test a ver si se puede tirar una ficha si aun existen jugadas posibles \n  // TODO: Supongamos que tenemos dos subconjuntos, cada uno de tres fichas identicas,\n  // y solo tenemos dos espacios libres. Creo que entonces, el jugador se quedaria\n  // atascado, a pesar de no tener jugadas posibles! \n\n\n  tirarFicha(ficha) {\n    if (ficha) {\n      //Comparar con state.cols, no props.cols \n      for (const f in this.state.fichasEnCanasta) {\n        var fichaActual = this.props.sala[\"fichas\"][this.state.fichasEnCanasta[f]];\n        console.log(fichaActual);\n\n        for (const col in this.state.cols) {\n          if (this.state.cols[col][0] == null || this.acuerda(fichaActual, this.getSubset(this.state.cols[col]))) {\n            console.log(`Aun se puede colocar ${fichaActual[\"color\"]} ${fichaActual[\"patron\"]} en columna ${col}`);\n            return;\n          }\n        }\n      }\n\n      var newBasura = this.clonar(this.state.basura);\n      const idx = this.props.sala[\"fichas\"].findIndex(x => x === ficha);\n      newBasura.push(idx);\n      var newCanasta = this.state.fichasEnCanasta.slice();\n      newCanasta.splice(this.state.fichasEnCanasta.findIndex(x => x == idx), 1);\n      this.setState({\n        basura: newBasura,\n        fichasEnCanasta: newCanasta\n      });\n      console.log(this.state.basura);\n    } else {\n      console.log(\"No se selecciono una ficha\");\n    }\n  } // TODO (not urgent) solo bajar las que no acuerden \n  // con el subset\n  // TODO: Que ocurre si en otro turno, el jugador logro poner algo en la \n  // basura, y luego le pica a este boton? Siquiera es posible?\n\n\n  borrarColumnas() {\n    console.log(\"Borrando ....\");\n    const enCanasta = [];\n    const misFichas = this.props.sala[\"usuarios\"][this.props.jugador][\"canasta\"];\n\n    for (const ficha in misFichas) {\n      enCanasta.push(misFichas[ficha]);\n    } //Columnas \n\n\n    const columnas = this.clonar(this.state.cols);\n\n    for (const col in this.state.cols) {\n      for (const f in this.state.cols[col]) {\n        if (misFichas.includes(this.state.cols[col][f])) {\n          //Solo borrar las fichas que se bajaron en este turno\n          columnas[col][f] = null;\n        }\n      }\n    }\n\n    const newBasura = [];\n\n    for (const f in this.state.basura) {\n      if (!misFichas.includes(this.state.basura[f])) {\n        //Solo borrar las fichas que se tiraron en este turno\n        newBasura.push(this.state.basura[f]);\n      }\n    }\n\n    this.setState({\n      cols: columnas,\n      basura: newBasura,\n      fichasEnCanasta: enCanasta\n    });\n  } // Se~nalar el subconjunto segun la ficha seleccionada \n  //La funcion que se llama cuando se selecciona una ficha en la canasta\n\n\n  elegirSubconjunto(ficha) {\n    console.log(`Eligiendo el subconjunto en base de ${ficha[\"color\"]}, ${ficha[\"patron\"]}`);\n    console.log(`Subconjunto actual: ${this.state.subset}`);\n    this.setState({\n      fichaElegida: ficha\n    });\n    var subsetlen = this.state.subset.length; // Si no se ha eligido una ficha o si la ficha no acuerda\n\n    if (subsetlen == 0 || !this.acuerda(ficha)) {\n      console.log(`O no se eligio una ficha, o no acuerda!`);\n\n      if (!this.acuerda(ficha)) {\n        //Hate calculating this twice but whatever\n        console.log(\"Borrando columnas ...\");\n        this.borrarColumnas();\n        console.log(\"Se borro!\");\n      }\n\n      this.setState({\n        subset: [ficha[\"color\"], ficha[\"patron\"]]\n      });\n    } else {\n      if (subsetlen == 2) {\n        // Solo se ha elegido una ficha\n        if (this.state.subset.includes(ficha[\"patron\"])) {\n          if (!this.state.subset.includes(ficha[\"color\"])) {\n            //Si NO son identicas\n            this.setState({\n              subset: [ficha[\"patron\"]]\n            });\n          }\n        } else {\n          //Como concuerdan, no se tiene que checar si tienen el mismo color\n          this.setState({\n            subset: [ficha[\"color\"]]\n          });\n        }\n      } else if (subsetlen == 1) {\n        // Ya se han elegido >1 fichas no identicas, y la nueva elegida concuerda\n        return; //no hay nada mas que hacer\n      } else {\n        console.log(`ERROR App.js 184 - The maximum length of subset is 2. Current subset: ${this.state.subset}`);\n      }\n    }\n\n    return ficha;\n  } //Cuando se esta usando el drag and drop \n\n\n  dragAndDropFicha(col, ficha) {\n    this.elegirSubconjunto(ficha);\n    this.ponerFicha(col, ficha);\n  }\n\n  renderFicha(ficha) {\n    let op = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (ficha) {\n      var funcionOnclick = () => void 0;\n\n      if (this.props.activo) {\n        var funcionOnclick = () => this.elegirSubconjunto(ficha);\n      }\n\n      let color = ficha[\"color\"];\n      let style = {};\n\n      if (op) {\n        if (this.state.fichaElegida == ficha) {\n          style = {\n            border: '2px solid black'\n          };\n        }\n      } else {\n        style = {\n          opacity: \"50%\"\n        };\n      }\n\n      let simbolo = ficha[\"patron\"];\n      return /*#__PURE__*/_jsxDEV(Ficha, {\n        fichaItem: ficha,\n        style: style,\n        color: ficha[\"color\"],\n        simbolo: simbolo,\n        onclick: funcionOnclick\n      }, ficha[\"id\"], false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 14\n      }, this);\n    } else {\n      return null;\n    }\n  }\n\n  goButtonOnClickFunction() {\n    let onClick = () => alert(\"No es tu turno\");\n\n    let style = {\n      opacity: \"50%\"\n    };\n    var quedanFichas = [];\n\n    for (const s in this.state.subset) {\n      var subs = [this.state.subset[s]];\n      quedanFichas.push(true);\n\n      for (const f in this.state.fichasEnCanasta) {\n        if (this.acuerda(this.props.sala[\"fichas\"][this.state.fichasEnCanasta[f]], subs)) {\n          console.log(`Aun quedan fichas en subconjunto ${subs}`);\n          quedanFichas[s] = false;\n          break;\n        }\n      }\n    }\n\n    onClick = () => alert(\"Favor de seleccionar un subconjunto completo\");\n\n    if (quedanFichas.length > 0) {\n      if (quedanFichas.reduce((x, y) => x || y)) {\n        style = {};\n\n        onClick = () => this.hacerJugada();\n      }\n    } else {\n      onClick = () => this.hacerJugada();\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      style: style,\n      onClick: onClick,\n      children: \"Hacer jugada\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 12\n    }, this);\n  }\n\n  renderGoButton() {\n    if (this.props.socket && !this.props.sala[\"local\"]) {\n      if (this.props.socket.current.id == this.props.sala[\"turno\"]) {\n        return this.goButtonOnClickFunction();\n      }\n    } else if (this.props.sala[\"local\"]) {\n      if (this.props.sala[\"usuarios\"][this.props.jugador][\"usuario\"] == this.props.sala[\"turno\"]) {\n        return this.goButtonOnClickFunction();\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        opacity: \"50%\"\n      },\n      onClick: () => alert(\"No es tu turno\"),\n      children: \"Hacer jugada\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 12\n    }, this);\n  }\n\n  renderUndoButton() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => this.borrarColumnas(),\n      children: \" Deshacer \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 12\n    }, this);\n  } //Mostrar la canasta, tambien el boton para hacer jugada\n\n\n  renderCanasta() {\n    const fich = [];\n\n    for (const ficha in this.state.fichasEnCanasta) {\n      var fichaActual = this.state.fichasEnCanasta[ficha];\n\n      if (this.state.subset.length == 0 || this.acuerda(this.props.sala[\"fichas\"][fichaActual])) {\n        fich.push(this.renderFicha(this.props.sala[\"fichas\"][fichaActual]));\n      } else {\n        fich.push(this.renderFicha(this.props.sala[\"fichas\"][fichaActual], false));\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(Canasta, {\n      fichas: fich\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 12\n    }, this);\n  } //Mostrar tablero\n\n\n  renderTablero() {\n    var columnas;\n\n    columnas = arr => arr.map(x => Array.isArray(x) ? columnas(x) : this.renderFicha(this.props.sala[\"fichas\"][x]));\n\n    if (this.props.sala[\"activo\"]) {\n      return /*#__PURE__*/_jsxDEV(Tablero, {\n        ficha: this.state.fichaElegida,\n        puntuacion: this.props.sala[\"usuarios\"][this.props.jugador].puntuacion[1],\n        cols: columnas(this.state.cols),\n        dndFicha: (c, f) => this.dragAndDropFicha(c, f),\n        ponerFicha: (c, f) => this.ponerFicha(c, f),\n        tableroFichas: columnas(this.state.tablero)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 14\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Tablero, {\n        ficha: this.state.fichaElegida,\n        cols: this.state.cols,\n        tableroFichas: null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 14\n      }, this);\n    }\n  }\n\n  renderJugador() {\n    var renderBasura = arr => arr.map(x => this.renderFicha(this.props.sala[\"fichas\"][x]));\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"jugador\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"elementos\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"tablero\",\n          children: this.renderTablero()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"basura-y-canasta\",\n          children: [this.renderCanasta(), /*#__PURE__*/_jsxDEV(Basura, {\n            fichas: renderBasura(this.state.basura),\n            ficha: this.state.fichaElegida,\n            tirarFicha: f => this.tirarFicha(f)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"puntuacion\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"PUNTUACION: \", this.props.sala[\"usuarios\"][this.props.jugador].puntuacion[0]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 7\n    }, this);\n  }\n\n  render() {\n    var cls = \"botones-y-jugador\";\n\n    if (!this.props.sala[\"local\"]) {\n      var mostrarBotones = this.props.sala[\"activo\"] && this.props.socket.current.id == this.props.sala[\"usuarios\"][this.props.jugador][\"usuario\"] && this.props.socket.current.id == this.props.sala[\"turno\"];\n    } else {\n      //multiplayer local\n      var mostrarBotones = this.props.sala[\"activo\"] && this.props.sala[\"usuarios\"][this.props.jugador][\"usuario\"] == this.props.sala[\"turno\"];\n    }\n\n    var botones = [this.renderGoButton(), this.renderUndoButton()];\n\n    if (this.props.sala[\"usuarios\"][this.props.jugador][\"usuario\"] == this.props.sala[\"turno\"]) {\n      cls = \"botones-y-jugador jugador-actual\";\n    }\n\n    if (mostrarBotones) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        class: cls,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"botones\",\n          children: botones\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 13\n        }, this), this.renderJugador()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        class: cls,\n        children: [\" \", this.renderJugador()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 14\n      }, this);\n    }\n  }\n\n}\n\nexport default Jugador;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Canasta\");\n$RefreshReg$(_c2, \"Basura\");","map":{"version":3,"names":["io","React","ReactDOM","HTML5Backend","Tablero","Ficha","Canasta","props","fichas","Basura","tirarFicha","ficha","Jugador","Component","constructor","console","log","enCanasta","jugador","sala","push","columnas","Array","fill","state","fichaElegida","fichasEnCanasta","tablero","basura","cols","subset","hacerJugada","usuario","length","u","acabarRonda","componentDidUpdate","prevProps","activo","setState","clonar","flat","acuerda","includes","arr","map","x","isArray","getSubset","col","fichasKey","f","error","ponerFicha","len","newCol","newCanasta","slice","fil","idx","findIndex","splice","fichaActual","newBasura","borrarColumnas","misFichas","elegirSubconjunto","subsetlen","dragAndDropFicha","renderFicha","op","funcionOnclick","color","style","border","opacity","simbolo","goButtonOnClickFunction","onClick","alert","quedanFichas","s","subs","reduce","y","renderGoButton","socket","current","id","renderUndoButton","renderCanasta","fich","renderTablero","puntuacion","c","renderJugador","renderBasura","render","cls","mostrarBotones","botones"],"sources":["/home/csgarciamartinez/Telar/telar-client/src/Jugador.js"],"sourcesContent":["import { io } from 'socket.io-client';\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './jugador.css';\nimport{HTML5Backend} from 'react-dnd-html5-backend'\nimport Tablero from './Tablero'\nimport Ficha from './Ficha'\n\n//todo (less urgent) lots of refactoring, see if I can eliminate a lot of the\n// \"mirroring\" going on in componentdidupdate, why dont i just use props \n// from the source? \n\n//TODO WHEN REFACTORING: Instead of having a text field that users can input anything into,\n// have the game generate a random hex code you can send to your friends, and limit\n// number of characters they can enter into the enter nbox \n\n//TODO (extreeeeemely low priority): spectator mode\n\n\nfunction Canasta(props){\n  return(\n    <div className=\"canasta\"> \n      <div className=\"fichas\">\n        {props.fichas}\n        </div>\n    </div>\n  )\n}\n\nfunction Basura(props){\n  return(\n    <div className=\"basura\" onClick = {() => props.tirarFicha(props.ficha)}>\n      <div className=\"fichas\">\n        {props.fichas}\n      </div>\n    </div>\n  )\n}\n\n\n// Will store information on currently selected subset, eventually \n// also player order\n\nclass Jugador extends React.Component{\n  constructor(props) {\n    console.log(\"Construyendo el jugador ...\")\n    super(props);\n\n    //Canasta \n    const enCanasta = []\n    const jugador = this.props.sala[\"usuarios\"][this.props.jugador]\n    for(const ficha in jugador[\"canasta\"]){\n      enCanasta.push(jugador[\"canasta\"][ficha])\n    }\n    //Columnas \n    const columnas = Array(5)\n    columnas[0] = Array(3).fill(null)\n    columnas[1] = Array(2).fill(null)\n    columnas[2] = Array(1).fill(null)\n    columnas[3] = Array(2).fill(null)\n    columnas[4] = Array(3).fill(null)\n\n\n    this.state = {\n      fichaElegida: null,\n      fichasEnCanasta: enCanasta,\n      tablero: Array(25).fill(null),\n      basura: [],\n      cols: columnas,\n      subset: [], // Si concuerda con cualquier cosa en el subconjunto\n    }\n\n  }\n\n  //TODO: REALLY WORRIED ABOUT WHAT HAPPENS SI UN JUGADOR ACABA CON LAS FICHAS\n  //EN SU CANASTA EN LA PRIMERA RONDA, PERO AUN HAY FICHAS EN OTRAS CANASTAS!\n  //PROBABLEMENTE SE SOLUCIONE CON UN \"PLAYER TURN\" \n  hacerJugada(){\n    const usuario = this.props.sala[\"usuarios\"][this.props.jugador][\"usuario\"]\n    if(this.state.fichasEnCanasta.length){\n      console.log(\"Haciendo jugada ...\")\n      this.props.hacerJugada(this.state)\n    } else{ // Si no quedan fichas en canasta pero el otro si tiene \n      for(const u in this.props.sala[\"usuarios\"]){\n        if(this.props.sala[\"usuarios\"][u][\"usuario\"] != usuario && this.props.sala[\"usuarios\"][u][\"canasta\"].length){\n          console.log(\"Haciendo jugada ...\")\n          this.props.hacerJugada(this.state)\n          return \n        }\n      }\n      this.props.acabarRonda(this.state)\n      console.log(\"Se acabo la ronda ... \")\n    }\n  }\n\n  //TODO: Refactor this, get it out of here\n  //TODO: REALLY WORRIED ABOUT WHAT HAPPENS SI UN JUGADOR ACABA CON LAS FICHAS\n  //EN SU CANASTA EN LA PRIMERA RONDA, PERO AUN HAY FICHAS EN OTRAS CANASTAS!\n  //PROBABLEMENTE SE SOLUCIONE CON UN \"PLAYER TURN\" \n  //TODO: RERENDERING TABLERO EVEN WHEN I DON'T HAVE TO, FUCKING STUPID\n\n\n  //TODO: make this respond to GAME TURN not to FICHAS CHANGE \n  componentDidUpdate(prevProps){\n    console.log(this.props)\n    console.log(prevProps)\n    if(this.props.sala[\"local\"] && (this.props.activo != prevProps.activo)){\n      console.log(\"Es tu turno!\")\n      const jugador = this.props.sala[\"usuarios\"][this.props.jugador]\n      const enCanasta = []\n      for(const ficha in jugador[\"canasta\"]){\n        enCanasta.push(jugador[\"canasta\"][ficha])\n      }\n      if(jugador[\"columnas\"]){\n        this.setState({fichasEnCanasta: enCanasta, subset: [], cols: this.clonar(jugador[\"columnas\"])})\n      }\n      if(jugador[\"tablero\"]){\n        this.setState({tablero:jugador[\"tablero\"].flat()})\n      }\n      this.setState({fichasEnCanasta: enCanasta})\n    }\n    else if(this.props.sala[\"turno\"] !== prevProps.sala[\"turno\"]){\n      console.log(\"Cambio en la sala!\")\n      const jugador = this.props.sala[\"usuarios\"][this.props.jugador]\n      const enCanasta = []\n      for(const ficha in jugador[\"canasta\"]){\n        enCanasta.push(jugador[\"canasta\"][ficha])\n      }\n      if(jugador[\"columnas\"]){\n        this.setState({fichasEnCanasta: enCanasta, subset: [], cols: this.clonar(jugador[\"columnas\"])})\n      } else {\n        const columnas = Array(5)\n        columnas[0] = Array(3).fill(null)\n        columnas[1] = Array(2).fill(null)\n        columnas[2] = Array(1).fill(null)\n        columnas[3] = Array(2).fill(null)\n        columnas[4] = Array(3).fill(null)\n        this.setState({fichasEnCanasta: enCanasta, subset: [], cols: columnas})\n      }\n      if(jugador[\"tablero\"]){\n        this.setState({tablero:jugador[\"tablero\"].flat()})\n      }\n      if(jugador[\"basura\"]){\n        this.setState({basura: jugador[\"basura\"]})\n      }\n    }\n  }\n\n  acuerda(ficha, subset = this.state.subset){\n    return(subset.includes(ficha[\"patron\"]) || subset.includes(ficha[\"color\"]));\n  }\n\n  //Para clonar las columnas\n  clonar(arr){\n    return arr.map(x => Array.isArray(x) ? this.clonar(x) : x)\n  }\n\n  //Sacar el subconjunto de una columna\n  getSubset(col){\n    var fichasKey = this.props.sala[\"fichas\"]\n    console.log(col)\n    if(col[0]){\n      var subset = [fichasKey[col[0]][\"color\"], fichasKey[col[0]][\"patron\"]]\n      for(const f in col){\n        if(col[f]){\n          if(subset.includes(fichasKey[col[f]][\"color\"])){\n            if(subset.length > 1 && !subset.includes(fichasKey[col[f]][\"patron\"])){\n              subset = [fichasKey[col[f]][\"color\"]]\n              console.log(`${subset}`)\n            }\n          } else if (subset.includes(fichasKey[col[f]][\"patron\"] )) { \n            subset = [fichasKey[col[f]][\"patron\"]]\n            console.log(`${subset}`)\n          } else { // No deberia occurrir\n            console.error(`Columna ${col} no fue construida bien`)\n            return []\n          }\n        } else {\n          return subset\n        }\n      }\n      return [] //Esta llena la columna \n    } else {\n      return []\n    }\n  }\n\n  ponerFicha(col, ficha){\n    if (ficha){\n      //Probablemente seria mejor tener un state con el subconjunto actual\n      // de cada columna pero va ser dificil manejarlo por >1 ronda y los subconjuntos \n      //son peque~nos asi que mejor calcularlo cada vez\n      if(!this.state.cols[col][0] || this.acuerda(ficha, this.getSubset(this.state.cols[col]))){\n        console.log(`Trying to place ${ficha[\"patron\"]}, ${ficha[\"color\"]}`)  \n        const len = this.state.cols[col].length\n        const newCol = this.clonar(this.state.cols)\n        const newCanasta = this.state.fichasEnCanasta.slice()\n        let fil = 0\n        while(fil < len && this.state.cols[col][fil]){\n          fil++\n        }\n        console.log(`Poniendo en columna ${col}, fila ${fil}`)\n        if(fil == len){ // Esta llena la columna\n          console.log(\"Can't place here!\")\n          //TODO actually show to player\n        } else {\n          const idx = this.props.sala[\"fichas\"].findIndex(x => x === ficha)\n          newCol[col][fil] = idx\n          console.log(`${newCanasta}`)\n          console.log(`${idx}`)\n          newCanasta.splice(this.state.fichasEnCanasta.findIndex(x => x == idx), 1)\n          console.log(`${newCanasta}`)\n        }\n        this.setState({\n          fichaElegida: null,\n          cols: newCol,\n          fichasEnCanasta: newCanasta\n        })\n      } else {\n        console.log(\"Ficha no acuerda con columna o columna esta llena\")\n      }\n    } else {\n      console.log(\"No se selecciono una ficha\")\n    }\n  }\n\n\n  // TODO: Test a ver si se puede tirar una ficha si aun existen jugadas posibles \n  // TODO: Supongamos que tenemos dos subconjuntos, cada uno de tres fichas identicas,\n  // y solo tenemos dos espacios libres. Creo que entonces, el jugador se quedaria\n  // atascado, a pesar de no tener jugadas posibles! \n  tirarFicha(ficha){\n    if(ficha){ //Comparar con state.cols, no props.cols \n      for(const f in this.state.fichasEnCanasta){\n        var fichaActual = this.props.sala[\"fichas\"][this.state.fichasEnCanasta[f]]\n        console.log(fichaActual)\n        for (const col in this.state.cols){\n          if(this.state.cols[col][0] == null ||\n            this.acuerda(fichaActual, this.getSubset(this.state.cols[col]))) {\n              console.log(`Aun se puede colocar ${fichaActual[\"color\"]} ${fichaActual[\"patron\"]} en columna ${col}`)\n              return \n          }\n        }\n      }\n\n      var newBasura = this.clonar(this.state.basura);\n      const idx = this.props.sala[\"fichas\"].findIndex(x => x === ficha)\n      newBasura.push(idx)\n      var newCanasta = this.state.fichasEnCanasta.slice()\n      newCanasta.splice(this.state.fichasEnCanasta.findIndex(x => x == idx), 1)\n\n      this.setState({basura: newBasura, fichasEnCanasta: newCanasta})\n      console.log(this.state.basura)\n    } else {\n      console.log(\"No se selecciono una ficha\")\n    }\n  }\n\n  // TODO (not urgent) solo bajar las que no acuerden \n  // con el subset\n  // TODO: Que ocurre si en otro turno, el jugador logro poner algo en la \n  // basura, y luego le pica a este boton? Siquiera es posible?\n  borrarColumnas(){\n    console.log(\"Borrando ....\")\n    const enCanasta = []\n    const misFichas = this.props.sala[\"usuarios\"][this.props.jugador][\"canasta\"]\n    for(const ficha in misFichas){\n      enCanasta.push(misFichas[ficha])\n    }\n    //Columnas \n    const columnas = this.clonar(this.state.cols)\n    for(const col in this.state.cols){\n      for(const f in this.state.cols[col]){\n        if(misFichas.includes(this.state.cols[col][f])){\n          //Solo borrar las fichas que se bajaron en este turno\n          columnas[col][f] = null   \n        }\n      }\n    }\n\n    const newBasura = []\n    for (const f in this.state.basura){\n      if(!misFichas.includes(this.state.basura[f])){\n        //Solo borrar las fichas que se tiraron en este turno\n        newBasura.push(this.state.basura[f])\n      }\n    }\n\n    this.setState({cols: columnas, basura: newBasura, fichasEnCanasta: enCanasta})\n\n  }\n\n// Se~nalar el subconjunto segun la ficha seleccionada \n//La funcion que se llama cuando se selecciona una ficha en la canasta\n  elegirSubconjunto(ficha){\n    console.log(`Eligiendo el subconjunto en base de ${ficha[\"color\"]}, ${ficha[\"patron\"]}`)\n    console.log(`Subconjunto actual: ${this.state.subset}`)\n    this.setState({fichaElegida: ficha})\n    var subsetlen = this.state.subset.length\n    // Si no se ha eligido una ficha o si la ficha no acuerda\n    if(subsetlen == 0 || !this.acuerda(ficha)){\n      console.log(`O no se eligio una ficha, o no acuerda!`)\n      if(!this.acuerda(ficha)){ //Hate calculating this twice but whatever\n        console.log(\"Borrando columnas ...\")\n        this.borrarColumnas()\n        console.log(\"Se borro!\")\n      } \n      this.setState({subset: [ficha[\"color\"], ficha[\"patron\"]]})\n    } else {\n      if(subsetlen == 2){ // Solo se ha elegido una ficha\n        if(this.state.subset.includes(ficha[\"patron\"])){\n          if(!this.state.subset.includes(ficha[\"color\"])){ //Si NO son identicas\n              this.setState({subset: [ficha[\"patron\"]]})\n          }\n        } else { //Como concuerdan, no se tiene que checar si tienen el mismo color\n          this.setState({subset: [ficha[\"color\"]]})\n        } \n      } else if (subsetlen == 1){ // Ya se han elegido >1 fichas no identicas, y la nueva elegida concuerda\n        return; //no hay nada mas que hacer\n      } else {\n        console.log(`ERROR App.js 184 - The maximum length of subset is 2. Current subset: ${this.state.subset}`);\n      }\n    }\n    return ficha\n  }\n\n  //Cuando se esta usando el drag and drop \n  dragAndDropFicha(col, ficha){\n    this.elegirSubconjunto(ficha)\n    this.ponerFicha(col, ficha)\n  }\n\n  renderFicha(ficha, op = true){\n    if(ficha){\n      var funcionOnclick = () => void 0\n      if(this.props.activo){\n        var funcionOnclick = () => this.elegirSubconjunto(ficha)\n      }\n      let color = ficha[\"color\"]\n      let style = {}\n      if(op){\n        if(this.state.fichaElegida == ficha){\n          style = {border: '2px solid black'}\n        }\n      } else {\n        style = {opacity: \"50%\"}\n      }\n      let simbolo = ficha[\"patron\"]\n      return(<Ficha fichaItem = {ficha}\n                    style = {style}\n                    color = {ficha[\"color\"]}\n                    key = {ficha[\"id\"]}\n                    simbolo = {simbolo}\n                    onclick= {funcionOnclick}  />)\n    } else {\n      return null\n    }\n  }\n\n  goButtonOnClickFunction(){\n    let onClick = () => alert(\"No es tu turno\")\n    let style = {opacity: \"50%\"}\n    var quedanFichas = []\n    for(const s in this.state.subset){\n      var subs = [this.state.subset[s]]\n      quedanFichas.push(true)\n      for(const f in this.state.fichasEnCanasta){\n        if(this.acuerda(this.props.sala[\"fichas\"][this.state.fichasEnCanasta[f]], subs)) {\n          console.log(`Aun quedan fichas en subconjunto ${subs}`)\n          quedanFichas[s] = false\n          break\n        }\n      }\n    }\n    onClick = () => alert(\"Favor de seleccionar un subconjunto completo\")\n    if(quedanFichas.length > 0 ){\n      if(quedanFichas.reduce((x, y) => x || y)){\n        style = {}\n        onClick= ()=>this.hacerJugada()\n      }\n    } else {\n      onClick= ()=>this.hacerJugada()\n    }\n\n    return(<button style = {style} onClick={onClick}>Hacer jugada</button>)\n  }\n\n  renderGoButton(){\n    if(this.props.socket && !this.props.sala[\"local\"]){\n      if(this.props.socket.current.id == this.props.sala[\"turno\"]){\n        return this.goButtonOnClickFunction()\n      }\n    } else if (this.props.sala[\"local\"]){\n      if (this.props.sala[\"usuarios\"][this.props.jugador][\"usuario\"] == this.props.sala[\"turno\"]){\n        return this.goButtonOnClickFunction()\n      }\n    }\n    return(<button style = {{opacity: \"50%\"}} onClick={() => alert(\"No es tu turno\")}>Hacer jugada</button>)\n  }\n\n  renderUndoButton(){\n    return(<button onClick = {() => this.borrarColumnas()}> Deshacer </button>)\n  }\n\n  //Mostrar la canasta, tambien el boton para hacer jugada\n  renderCanasta(){\n    const fich = []\n    for (const ficha in this.state.fichasEnCanasta){\n      var fichaActual = this.state.fichasEnCanasta[ficha]\n      if (this.state.subset.length == 0 || this.acuerda(this.props.sala[\"fichas\"][fichaActual])) { \n        fich.push(this.renderFicha(this.props.sala[\"fichas\"][fichaActual]))\n      } else {\n        fich.push(this.renderFicha(this.props.sala[\"fichas\"][fichaActual], false))\n      }\n    }\n    return(<Canasta fichas = {fich} />)\n  }\n\n  //Mostrar tablero\n  renderTablero(){\n    var columnas\n    columnas = (arr) => arr.map(x => Array.isArray(x) ? columnas(x) : this.renderFicha(this.props.sala[\"fichas\"][x]))\n    if(this.props.sala[\"activo\"]){\n      return(<Tablero \n                      ficha = {this.state.fichaElegida} \n                      puntuacion = {this.props.sala[\"usuarios\"][this.props.jugador].puntuacion[1]}\n                      cols = {columnas(this.state.cols)} dndFicha = {(c, f) => this.dragAndDropFicha(c, f)} ponerFicha = {(c, f) => this.ponerFicha(c, f)} \n                      tableroFichas = {columnas(this.state.tablero)}/>)\n    } else {\n      return(<Tablero ficha = {this.state.fichaElegida} cols = {this.state.cols} tableroFichas = {null}/>)\n    }\n  }\n\n  renderJugador(){\n    var renderBasura = (arr) => arr.map(x => this.renderFicha(this.props.sala[\"fichas\"][x]))\n    return(\n      <div class=\"jugador\">\n          <div class=\"elementos\">\n            <div class=\"tablero\">{this.renderTablero()}</div>\n            <div class =\"basura-y-canasta\">\n                {this.renderCanasta()}\n                <Basura fichas = {renderBasura(this.state.basura)} \n                        ficha = {this.state.fichaElegida}\n                        tirarFicha = {(f) => this.tirarFicha(f)}/>\n            </div>\n          </div>\n          <div class=\"puntuacion\">\n              <p>PUNTUACION: {this.props.sala[\"usuarios\"][this.props.jugador].puntuacion[0]}</p>\n            </div>\n        </div>\n      )\n  }\n\n  render(){\n    var cls = \"botones-y-jugador\"\n    if(!this.props.sala[\"local\"]){\n      var mostrarBotones = (this.props.sala[\"activo\"]) && (this.props.socket.current.id == this.props.sala[\"usuarios\"][this.props.jugador][\"usuario\"])  && (this.props.socket.current.id == this.props.sala[\"turno\"])\n    } else { //multiplayer local\n      var mostrarBotones = (this.props.sala[\"activo\"]) && (this.props.sala[\"usuarios\"][this.props.jugador][\"usuario\"] == this.props.sala[\"turno\"])\n    }\n    var botones = [this.renderGoButton(), this.renderUndoButton()]\n    if(this.props.sala[\"usuarios\"][this.props.jugador][\"usuario\"] == this.props.sala[\"turno\"]){\n      cls = \"botones-y-jugador jugador-actual\"\n    }\n    if(mostrarBotones){\n      return(\n        <div class = {cls}>\n            <div class = \"botones\">\n              {botones}\n            </div>\n            {this.renderJugador()}\n          </div>\n      )\n    } else {\n      return(<div class = {cls}> {this.renderJugador()}</div>)\n    }\n  }\n}\n\nexport default Jugador;"],"mappings":"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"},"metadata":{},"sourceType":"module"}