{"ast":null,"code":"var colores = [\"rojo\", \"verde\", \"azul\", \"blanco\", \"negro\"];\nvar simbolos = [0, 1, 2, 3, 4];\n\nfunction crearFichas() {\n  var fichaId = 0;\n  fichas = []; //Instanciar el centro de fichas \n\n  for (let x = 0; x < 5; x++) {\n    for (const clr in colores) {\n      for (const sim in simbolos) {\n        fichas.push({\n          color: colores[clr],\n          patron: simbolos[sim],\n          id: fichaId\n        });\n        fichaId++;\n      }\n    }\n  }\n\n  return fichas;\n}\n\nfunction clonar(arr) {\n  return arr.map(x => Array.isArray(x) ? clonar(x) : x);\n}\n\nfunction nuevoTablero() {\n  let tamano = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n  var tablero = [];\n\n  for (var i = 0; i < tamano; i++) {\n    tablero.push(Array(tamano).fill(null));\n  }\n\n  return tablero;\n} // Un nuevo jugador se ha unido a la sala \n\n\nfunction nuevoJugador(usuarioId) {\n  return {\n    usuario: usuarioId,\n    canasta: [],\n    columnas: null,\n    desconexion: null,\n    tablero: nuevoTablero(),\n    basura: [],\n    puntuacion: [0, []]\n  };\n}\n\nfunction nuevaSala(usuarioId, nombre) {\n  return newroom = {\n    usuarios: [nuevoJugador(usuarioId)],\n    sala: nombre,\n    fichas: [],\n    //Diccionario de fichas\n    fichasCentro: [],\n    // Fichas que se pueden jugar\n    ronda: 0,\n    turno: usuarioId,\n    activo: false,\n    primerTurno: true,\n    //Para manejar requests multiples para terminar una ronda \n    espera: false //Para manejar desconecciones \n\n  };\n}\n\nfunction indexesToFichas(arr, fichasDict) {\n  var newArr = [];\n\n  for (const f in arr) {\n    newArr.push(fichasDict[arr[f]]);\n  }\n\n  return newArr;\n}\n\nmodule.exports = {\n  crearFichas,\n  nuevaSala,\n  nuevoJugador,\n  clonar,\n  indexesToFichas\n};","map":{"version":3,"names":["colores","simbolos","crearFichas","fichaId","fichas","x","clr","sim","push","color","patron","id","clonar","arr","map","Array","isArray","nuevoTablero","tamano","tablero","i","fill","nuevoJugador","usuarioId","usuario","canasta","columnas","desconexion","basura","puntuacion","nuevaSala","nombre","newroom","usuarios","sala","fichasCentro","ronda","turno","activo","primerTurno","espera","indexesToFichas","fichasDict","newArr","f","module","exports"],"sources":["/home/csgarciamartinez/Telar/telar-client/src/server/funcionesServidor.js"],"sourcesContent":["var colores = [\"rojo\", \"verde\", \"azul\", \"blanco\", \"negro\"]\nvar simbolos = [0, 1, 2, 3, 4];\n\nfunction crearFichas(){\n\tvar fichaId = 0;\n\tfichas = [];\n  \t//Instanciar el centro de fichas \n  \tfor(let x = 0; x< 5; x++) {\n\t  \tfor(const clr in colores){\n\t  \t\tfor(const sim in simbolos){\n\t  \t\t\tfichas.push({\n\t  \t\t\t\tcolor: colores[clr],\n\t  \t\t\t\tpatron: simbolos[sim],\n\t  \t\t\t\tid: fichaId\n\t  \t\t\t})\n\t  \t\t\tfichaId++;\n\t  \t\t}\n\t  \t}\n\t }\n\treturn fichas;\n}\n\nfunction clonar(arr){\n    return arr.map(x => Array.isArray(x) ? clonar(x) : x)\n  }\n\n\nfunction nuevoTablero(tamano = 5){\n\tvar tablero = []\n  for(var i = 0; i < tamano; i++){ \n  \ttablero.push(Array(tamano).fill(null))\n  }\n  return tablero\n}\n\n  // Un nuevo jugador se ha unido a la sala \n  function nuevoJugador(usuarioId){\n  \treturn {usuario:usuarioId, \n\t\t\t\t  \tcanasta: [], \n\t\t\t\t  \tcolumnas: null, \n\t\t\t\t  \tdesconexion: null, \n\t\t\t\t  \ttablero: nuevoTablero(), \n\t\t\t\t  \tbasura: [], \n\t\t\t\t  \tpuntuacion: [0, []]}\n  }\n\nfunction nuevaSala(usuarioId, nombre){\n  \treturn newroom = {\n  \t\tusuarios: [nuevoJugador(usuarioId)], \n  \t\tsala: nombre,\n  \t\tfichas: [], //Diccionario de fichas\n  \t\tfichasCentro: [], // Fichas que se pueden jugar\n  \t\tronda: 0,\n  \t\tturno: usuarioId,\n  \t\tactivo: false,\n  \t\tprimerTurno: true, //Para manejar requests multiples para terminar una ronda \n  \t\tespera: false //Para manejar desconecciones \n  \t}\n  }\n\n  function indexesToFichas(arr, fichasDict){\n\tvar newArr = []\n\tfor (const f in arr){\n\t\tnewArr.push(fichasDict[arr[f]])\n\t}\n\treturn newArr\n}\n\nmodule.exports = {crearFichas, nuevaSala, nuevoJugador, clonar, indexesToFichas};"],"mappings":"AAAA,IAAIA,OAAO,GAAG,CAAC,MAAD,EAAS,OAAT,EAAkB,MAAlB,EAA0B,QAA1B,EAAoC,OAApC,CAAd;AACA,IAAIC,QAAQ,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAf;;AAEA,SAASC,WAAT,GAAsB;EACrB,IAAIC,OAAO,GAAG,CAAd;EACAC,MAAM,GAAG,EAAT,CAFqB,CAGnB;;EACA,KAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAE,CAAlB,EAAqBA,CAAC,EAAtB,EAA0B;IACzB,KAAI,MAAMC,GAAV,IAAiBN,OAAjB,EAAyB;MACxB,KAAI,MAAMO,GAAV,IAAiBN,QAAjB,EAA0B;QACzBG,MAAM,CAACI,IAAP,CAAY;UACXC,KAAK,EAAET,OAAO,CAACM,GAAD,CADH;UAEXI,MAAM,EAAET,QAAQ,CAACM,GAAD,CAFL;UAGXI,EAAE,EAAER;QAHO,CAAZ;QAKAA,OAAO;MACP;IACD;EACF;;EACF,OAAOC,MAAP;AACA;;AAED,SAASQ,MAAT,CAAgBC,GAAhB,EAAoB;EAChB,OAAOA,GAAG,CAACC,GAAJ,CAAQT,CAAC,IAAIU,KAAK,CAACC,OAAN,CAAcX,CAAd,IAAmBO,MAAM,CAACP,CAAD,CAAzB,GAA+BA,CAA5C,CAAP;AACD;;AAGH,SAASY,YAAT,GAAiC;EAAA,IAAXC,MAAW,uEAAF,CAAE;EAChC,IAAIC,OAAO,GAAG,EAAd;;EACC,KAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,MAAnB,EAA2BE,CAAC,EAA5B,EAA+B;IAC9BD,OAAO,CAACX,IAAR,CAAaO,KAAK,CAACG,MAAD,CAAL,CAAcG,IAAd,CAAmB,IAAnB,CAAb;EACA;;EACD,OAAOF,OAAP;AACD,C,CAEC;;;AACA,SAASG,YAAT,CAAsBC,SAAtB,EAAgC;EAC/B,OAAO;IAACC,OAAO,EAACD,SAAT;IACHE,OAAO,EAAE,EADN;IAEHC,QAAQ,EAAE,IAFP;IAGHC,WAAW,EAAE,IAHV;IAIHR,OAAO,EAAEF,YAAY,EAJlB;IAKHW,MAAM,EAAE,EALL;IAMHC,UAAU,EAAE,CAAC,CAAD,EAAI,EAAJ;EANT,CAAP;AAOA;;AAEH,SAASC,SAAT,CAAmBP,SAAnB,EAA8BQ,MAA9B,EAAqC;EAClC,OAAOC,OAAO,GAAG;IAChBC,QAAQ,EAAE,CAACX,YAAY,CAACC,SAAD,CAAb,CADM;IAEhBW,IAAI,EAAEH,MAFU;IAGhB3B,MAAM,EAAE,EAHQ;IAGJ;IACZ+B,YAAY,EAAE,EAJE;IAIE;IAClBC,KAAK,EAAE,CALS;IAMhBC,KAAK,EAAEd,SANS;IAOhBe,MAAM,EAAE,KAPQ;IAQhBC,WAAW,EAAE,IARG;IAQG;IACnBC,MAAM,EAAE,KATQ,CASF;;EATE,CAAjB;AAWA;;AAED,SAASC,eAAT,CAAyB5B,GAAzB,EAA8B6B,UAA9B,EAAyC;EAC1C,IAAIC,MAAM,GAAG,EAAb;;EACA,KAAK,MAAMC,CAAX,IAAgB/B,GAAhB,EAAoB;IACnB8B,MAAM,CAACnC,IAAP,CAAYkC,UAAU,CAAC7B,GAAG,CAAC+B,CAAD,CAAJ,CAAtB;EACA;;EACD,OAAOD,MAAP;AACA;;AAEDE,MAAM,CAACC,OAAP,GAAiB;EAAC5C,WAAD;EAAc4B,SAAd;EAAyBR,YAAzB;EAAuCV,MAAvC;EAA+C6B;AAA/C,CAAjB"},"metadata":{},"sourceType":"module"}