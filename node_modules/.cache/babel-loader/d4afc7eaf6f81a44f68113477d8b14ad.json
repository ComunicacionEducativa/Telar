{"ast":null,"code":"var colores = [\"rojo\", \"verde\", \"azul\", \"blanco\", \"negro\"];\nvar simbolos = [0, 1, 2, 3, 4];\nconst USUARIOS_MAX = 4;\nconst USUARIOS_MIN = 1;\nconst FICHAS = crearFichas();\nconst VERBOSE = true;\n\nfunction crearFichas() {\n  var fichaId = 0;\n  var fichas = []; //Instanciar el centro de fichas \n\n  for (let x = 0; x < 5; x++) {\n    for (const clr in colores) {\n      for (const sim in simbolos) {\n        fichas.push({\n          color: colores[clr],\n          patron: simbolos[sim],\n          id: fichaId\n        });\n        fichaId++;\n      }\n    }\n  }\n\n  return fichas;\n}\n\nfunction clonar(arr) {\n  return arr.map(x => Array.isArray(x) ? clonar(x) : x);\n}\n\nfunction nuevoTablero() {\n  let tamano = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n  var tablero = [];\n\n  for (var i = 0; i < tamano; i++) {\n    tablero.push(Array(tamano).fill(null));\n  }\n\n  return tablero;\n} // Un nuevo jugador se ha unido a la sala \n\n\nfunction nuevoJugador(usuarioId) {\n  return {\n    usuario: usuarioId,\n    canasta: [],\n    columnas: null,\n    desconexion: null,\n    tablero: nuevoTablero(),\n    basura: [],\n    puntuacion: [0, []]\n  };\n}\n\nfunction nuevaSala(usuarioId, nombre) {\n  let esLocal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return {\n    usuarios: [nuevoJugador(usuarioId)],\n    local: esLocal,\n    sala: nombre,\n    fichas: [],\n    //Diccionario de fichas\n    fichasCentro: [],\n    // Fichas que se pueden jugar\n    ronda: 0,\n    turno: usuarioId,\n    activo: false,\n    primerTurno: true,\n    //Para manejar requests multiples para terminar una ronda \n    espera: false //Para manejar desconecciones \n\n  };\n}\n\nfunction indexesToFichas(arr, fichasDict) {\n  var newArr = [];\n\n  for (const f in arr) {\n    newArr.push(fichasDict[arr[f]]);\n  }\n\n  return newArr;\n}\n\nfunction distribuirFichas(salaActual, primerJugador) {\n  var idx = 0;\n\n  for (var y = 0; y < salaActual[\"usuarios\"].length; y++) {\n    if (y == primerJugador) {\n      for (let x = 0; x < 6; x++) {\n        idx = Math.floor(Math.random() * salaActual[\"fichasCentro\"].length);\n        salaActual[\"usuarios\"][primerJugador][\"canasta\"].push(salaActual[\"fichasCentro\"].splice(idx, 1)[0]);\n      }\n    } else {\n      for (let x = 0; x < 3; x++) {\n        idx = Math.floor(Math.random() * salaActual[\"fichasCentro\"].length);\n        salaActual[\"usuarios\"][y][\"canasta\"].push(salaActual[\"fichasCentro\"].splice(idx, 1)[0]);\n      }\n    }\n  }\n}\n\nfunction comenzarJuego(salaActual) {\n  salaActual[\"fichas\"] = FICHAS;\n\n  if (salaActual[\"usuarios\"].length < USUARIOS_MIN) {\n    console.log(`La sala ${salaActual} requiere de un minimo de dos jugadores para poder iniciar un juego.`);\n    return;\n  }\n\n  if (salaActual[\"activo\"]) {\n    console.log(`Ya se encuentra un juego en curso en la sala ${sala}`);\n    return;\n  }\n\n  salaActual[\"activo\"] = true; //Instanciar las fichas al centro \n\n  for (const fich in FICHAS) {\n    salaActual[\"fichasCentro\"].push(parseInt(fich));\n  } //Distribuir las fechas\n\n\n  fs.distribuirFichas(salaActual, 0);\n  console.log(`El cliente ${socket.id} comenzo el juego en la sala ${sala}.`);\n\n  if (VERBOSE) {\n    console.log(salaActual);\n  }\n}\n\nmodule.exports = {\n  crearFichas,\n  nuevaSala,\n  nuevoJugador,\n  clonar,\n  indexesToFichas,\n  distribuirFichas,\n  comenzarJuego\n};","map":{"version":3,"names":["colores","simbolos","USUARIOS_MAX","USUARIOS_MIN","FICHAS","crearFichas","VERBOSE","fichaId","fichas","x","clr","sim","push","color","patron","id","clonar","arr","map","Array","isArray","nuevoTablero","tamano","tablero","i","fill","nuevoJugador","usuarioId","usuario","canasta","columnas","desconexion","basura","puntuacion","nuevaSala","nombre","esLocal","usuarios","local","sala","fichasCentro","ronda","turno","activo","primerTurno","espera","indexesToFichas","fichasDict","newArr","f","distribuirFichas","salaActual","primerJugador","idx","y","length","Math","floor","random","splice","comenzarJuego","console","log","fich","parseInt","fs","socket","module","exports"],"sources":["/home/csgarciamartinez/Telar/telar-client/src/server/funcionesServidor.js"],"sourcesContent":["var colores = [\"rojo\", \"verde\", \"azul\", \"blanco\", \"negro\"]\nvar simbolos = [0, 1, 2, 3, 4];\nconst USUARIOS_MAX = 4;\nconst USUARIOS_MIN = 1;\nconst FICHAS = crearFichas();\nconst VERBOSE = true;\n\n\nfunction crearFichas(){\n\tvar fichaId = 0;\n\tvar fichas = [];\n  \t//Instanciar el centro de fichas \n  \tfor(let x = 0; x< 5; x++) {\n\t  \tfor(const clr in colores){\n\t  \t\tfor(const sim in simbolos){\n\t  \t\t\tfichas.push({\n\t  \t\t\t\tcolor: colores[clr],\n\t  \t\t\t\tpatron: simbolos[sim],\n\t  \t\t\t\tid: fichaId\n\t  \t\t\t})\n\t  \t\t\tfichaId++;\n\t  \t\t}\n\t  \t}\n\t }\n\treturn fichas;\n}\n\nfunction clonar(arr){\n    return arr.map(x => Array.isArray(x) ? clonar(x) : x)\n  }\n\n\nfunction nuevoTablero(tamano = 5){\n\tvar tablero = []\n  for(var i = 0; i < tamano; i++){ \n  \ttablero.push(Array(tamano).fill(null))\n  }\n  return tablero\n}\n\n  // Un nuevo jugador se ha unido a la sala \n  function nuevoJugador(usuarioId){\n  \treturn {usuario:usuarioId, \n\t\t\t\t  \tcanasta: [], \n\t\t\t\t  \tcolumnas: null, \n\t\t\t\t  \tdesconexion: null, \n\t\t\t\t  \ttablero: nuevoTablero(), \n\t\t\t\t  \tbasura: [], \n\t\t\t\t  \tpuntuacion: [0, []]}\n  }\n\nfunction nuevaSala(usuarioId, nombre, esLocal = false){\n  \treturn {\n  \t\tusuarios: [nuevoJugador(usuarioId)], \n  \t\tlocal : esLocal,\n  \t\tsala: nombre,\n  \t\tfichas: [], //Diccionario de fichas\n  \t\tfichasCentro: [], // Fichas que se pueden jugar\n  \t\tronda: 0,\n  \t\tturno: usuarioId,\n  \t\tactivo: false,\n  \t\tprimerTurno: true, //Para manejar requests multiples para terminar una ronda \n  \t\tespera: false //Para manejar desconecciones \n  \t}\n  }\n\nfunction indexesToFichas(arr, fichasDict){\n\tvar newArr = []\n\tfor (const f in arr){\n\t\tnewArr.push(fichasDict[arr[f]])\n\t}\n\treturn newArr\n}\n\nfunction distribuirFichas(salaActual, primerJugador){\n\tvar idx = 0;\n\tfor(var y = 0; y < salaActual[\"usuarios\"].length; y++){\n\t\tif(y == primerJugador){\n\t\t\tfor(let x = 0; x < 6; x++){\n\t\t\t\tidx = Math.floor(Math.random() * salaActual[\"fichasCentro\"].length)\n\t\t\t\tsalaActual[\"usuarios\"][primerJugador][\"canasta\"].push(salaActual[\"fichasCentro\"].splice(idx, 1)[0]);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (let x = 0; x < 3; x++) {\n\t  \t\tidx = Math.floor(Math.random() * salaActual[\"fichasCentro\"].length);\n\t  \t\tsalaActual[\"usuarios\"][y][\"canasta\"].push(salaActual[\"fichasCentro\"].splice(idx, 1)[0]);\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nfunction comenzarJuego(salaActual){\n  salaActual[\"fichas\"] = FICHAS\n  if(salaActual[\"usuarios\"].length < USUARIOS_MIN){ \n  \tconsole.log(`La sala ${salaActual} requiere de un minimo de dos jugadores para poder iniciar un juego.`)\n  \treturn; \n  }\n  if(salaActual[\"activo\"]){\n  \tconsole.log(`Ya se encuentra un juego en curso en la sala ${sala}`)\n  \treturn;\n  }\n\n  salaActual[\"activo\"] = true\n  //Instanciar las fichas al centro \n  for (const fich in FICHAS){\n  \tsalaActual[\"fichasCentro\"].push(parseInt(fich))\n  }\n\n  \t\t//Distribuir las fechas\n  fs.distribuirFichas(salaActual, 0)\n\tconsole.log(`El cliente ${socket.id} comenzo el juego en la sala ${sala}.`)\n\t if(VERBOSE){\n\t  console.log(salaActual)\n\t}\n\t  \t\n}\n\n\nmodule.exports = {crearFichas, nuevaSala, nuevoJugador, clonar, indexesToFichas, distribuirFichas, comenzarJuego};"],"mappings":"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"},"metadata":{},"sourceType":"module"}