{"ast":null,"code":"const puntuacion = require('./puntuacion.js');\n\nvar colores = [\"rojo\", \"verde\", \"azul\", \"blanco\", \"negro\"];\nvar simbolos = [0, 1, 2, 3, 4];\nconst USUARIOS_MAX = 4;\nconst USUARIOS_MIN = 1;\nconst FICHAS = crearFichas();\nconst VERBOSE = true;\n\nfunction crearFichas() {\n  var fichaId = 0;\n  var fichas = []; //Instanciar el centro de fichas \n\n  for (let x = 0; x < 5; x++) {\n    for (const clr in colores) {\n      for (const sim in simbolos) {\n        fichas.push({\n          color: colores[clr],\n          patron: simbolos[sim],\n          id: fichaId\n        });\n        fichaId++;\n      }\n    }\n  }\n\n  return fichas;\n}\n\nfunction clonar(arr) {\n  return arr.map(x => Array.isArray(x) ? clonar(x) : x);\n}\n\nfunction nuevoTablero() {\n  let tamano = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n  var tablero = [];\n\n  for (var i = 0; i < tamano; i++) {\n    tablero.push(Array(tamano).fill(null));\n  }\n\n  return tablero;\n} // Un nuevo jugador se ha unido a la sala \n\n\nfunction nuevoJugador(usuarioId) {\n  return {\n    usuario: usuarioId,\n    canasta: [],\n    columnas: null,\n    desconexion: null,\n    tablero: nuevoTablero(),\n    basura: [],\n    puntuacion: [0, []]\n  };\n}\n\nfunction nuevaSala(usuarioId, nombre) {\n  let esLocal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return {\n    usuarios: [nuevoJugador(usuarioId)],\n    local: esLocal,\n    sala: nombre,\n    fichas: [],\n    //Diccionario de fichas\n    fichasCentro: [],\n    // Fichas que se pueden jugar\n    ronda: 0,\n    turno: usuarioId,\n    activo: false,\n    primerTurno: true,\n    //Para manejar requests multiples para terminar una ronda \n    espera: false //Para manejar desconecciones \n\n  };\n}\n\nfunction indexesToFichas(arr, fichasDict) {\n  var newArr = [];\n\n  for (const f in arr) {\n    newArr.push(fichasDict[arr[f]]);\n  }\n\n  return newArr;\n}\n\nfunction distribuirFichas(salaActual, primerJugador) {\n  var idx = 0;\n\n  for (var y = 0; y < salaActual[\"usuarios\"].length; y++) {\n    if (y == primerJugador) {\n      for (let x = 0; x < 6; x++) {\n        idx = Math.floor(Math.random() * salaActual[\"fichasCentro\"].length);\n        salaActual[\"usuarios\"][primerJugador][\"canasta\"].push(salaActual[\"fichasCentro\"].splice(idx, 1)[0]);\n      }\n    } else {\n      for (let x = 0; x < 3; x++) {\n        idx = Math.floor(Math.random() * salaActual[\"fichasCentro\"].length);\n        salaActual[\"usuarios\"][y][\"canasta\"].push(salaActual[\"fichasCentro\"].splice(idx, 1)[0]);\n      }\n    }\n  }\n}\n\nfunction comenzarJuego(salaActual) {\n  console.log(salaActual);\n  salaActual[\"fichas\"] = FICHAS;\n\n  if (salaActual[\"usuarios\"].length < USUARIOS_MIN) {\n    console.log(`La sala ${salaActual[`sala`]} requiere de un minimo de dos jugadores para poder iniciar un juego.`);\n    return;\n  }\n\n  if (salaActual[\"activo\"]) {\n    console.log(`Ya se encuentra un juego en curso en la sala ${salaActual[\"sala\"]}`);\n    return;\n  }\n\n  salaActual[\"activo\"] = true; //Instanciar las fichas al centro \n\n  for (const fich in FICHAS) {\n    salaActual[\"fichasCentro\"].push(parseInt(fich));\n  } //Distribuir las fechas\n\n\n  distribuirFichas(salaActual, 0);\n\n  if (VERBOSE) {\n    console.log(salaActual);\n  }\n\n  return salaActual;\n}\n\nfunction bajarFichasYSacarPuntuacion(salaActual, state) {\n  let socket = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n\n  if (!salaActual[\"primerTurno\"] || salaActual[\"local\"]) {\n    //como primerTurno solo es para prevenir requests multiples, siempre es falso en salas locales\n    salaActual[\"primerTurno\"] = false; //Manejo de cada usuario en la sala \n\n    for (const u in salaActual[\"usuarios\"]) {\n      var usuarioActual = salaActual[\"usuarios\"][u];\n\n      if (usuarioActual[\"usuario\"] == socket.id) {\n        usuarioActual[\"canasta\"] = [];\n        usuarioActual[\"columnas\"] = state[\"cols\"];\n        usuarioActual[\"basura\"] = state[\"basura\"];\n      } // Bajar fichas y sacar puntuacion\n\n\n      var fichasBajadas = [];\n      var nuevoTablero = clonar(usuarioActual[\"tablero\"]);\n\n      for (const c in usuarioActual[\"columnas\"]) {\n        var colActual = usuarioActual[\"columnas\"][c];\n\n        if (colActual[colActual.length - 1] != null) {\n          //si esta llena la columna\n          console.log(\"BAJANDO UNA FICHA\");\n          usuarioActual[\"columnas\"][c] = Array(colActual.length).fill(null); // Se borra la columna \n\n          if (colActual.length > 1) {\n            //Se regresan las fichas de mas\n            salaActual[\"fichasCentro\"] = salaActual[\"fichasCentro\"].concat(indexesToFichas(colActual.slice(1), salaActual[\"fichas\"]));\n          }\n\n          for (const f in nuevoTablero[c]) {\n            // Se bajan las fichas \n            if (nuevoTablero[c][f] === null) {\n              nuevoTablero[c][f] = colActual[0];\n              fichasBajadas.push([parseInt(c), parseInt(f)]);\n\n              if (f == nuevoTablero[c].length - 1) {\n                salaActual[\"activo\"] = false;\n              }\n\n              break;\n            }\n          }\n        }\n      }\n\n      if (VERBOSE) {\n        console.log(nuevoTablero);\n      }\n\n      usuarioActual[\"tablero\"] = nuevoTablero;\n      const puntos = puntuacion.calcularPuntos(usuarioActual, fichasBajadas, usuarioActual[\"basura\"].length);\n      usuarioActual[\"puntuacion\"][0] += puntos[0];\n      usuarioActual[\"puntuacion\"][1] = puntos[1];\n      salaActual[\"fichasCentro\"] = salaActual[\"fichasCentro\"].concat(indexesToFichas(usuarioActual[\"basura\"], salaActual[\"fichas\"]));\n      usuarioActual[\"basura\"] = [];\n\n      if (VERBOSE) {\n        console.log(`USUARIO ${usuarioActual[\"usuario\"]} TRAS EL FINAL DE LA RONDA: ${usuarioActual}`);\n      }\n    }\n\n    salaActual[\"ronda\"] += 1;\n    var primerJugador = salaActual[\"ronda\"] % salaActual[\"usuarios\"].length;\n    salaActual[\"turno\"] = salaActual[\"usuarios\"][primerJugador][\"usuario\"];\n    distribuirFichas(salaActual, primerJugador);\n  } else {\n    console.log(`ERROR: Ya empezo la siguiente ronda en la sala ${salaActual[\"sala\"]}`);\n  }\n}\n\nmodule.exports = {\n  crearFichas,\n  nuevaSala,\n  nuevoJugador,\n  bajarFichasYSacarPuntuacion,\n  comenzarJuego\n};","map":{"version":3,"names":["puntuacion","require","colores","simbolos","USUARIOS_MAX","USUARIOS_MIN","FICHAS","crearFichas","VERBOSE","fichaId","fichas","x","clr","sim","push","color","patron","id","clonar","arr","map","Array","isArray","nuevoTablero","tamano","tablero","i","fill","nuevoJugador","usuarioId","usuario","canasta","columnas","desconexion","basura","nuevaSala","nombre","esLocal","usuarios","local","sala","fichasCentro","ronda","turno","activo","primerTurno","espera","indexesToFichas","fichasDict","newArr","f","distribuirFichas","salaActual","primerJugador","idx","y","length","Math","floor","random","splice","comenzarJuego","console","log","fich","parseInt","bajarFichasYSacarPuntuacion","state","socket","u","usuarioActual","fichasBajadas","c","colActual","concat","slice","puntos","calcularPuntos","module","exports"],"sources":["/home/csgarciamartinez/Telar/telar-client/src/server/funcionesServidor.js"],"sourcesContent":["\nconst puntuacion = require('./puntuacion.js')\n\nvar colores = [\"rojo\", \"verde\", \"azul\", \"blanco\", \"negro\"]\nvar simbolos = [0, 1, 2, 3, 4];\nconst USUARIOS_MAX = 4;\nconst USUARIOS_MIN = 1;\nconst FICHAS = crearFichas();\nconst VERBOSE = true;\n\n\nfunction crearFichas(){\n\tvar fichaId = 0;\n\tvar fichas = [];\n  \t//Instanciar el centro de fichas \n  \tfor(let x = 0; x< 5; x++) {\n\t  \tfor(const clr in colores){\n\t  \t\tfor(const sim in simbolos){\n\t  \t\t\tfichas.push({\n\t  \t\t\t\tcolor: colores[clr],\n\t  \t\t\t\tpatron: simbolos[sim],\n\t  \t\t\t\tid: fichaId\n\t  \t\t\t})\n\t  \t\t\tfichaId++;\n\t  \t\t}\n\t  \t}\n\t }\n\treturn fichas;\n}\n\nfunction clonar(arr){\n    return arr.map(x => Array.isArray(x) ? clonar(x) : x)\n  }\n\n\nfunction nuevoTablero(tamano = 5){\n\tvar tablero = []\n  for(var i = 0; i < tamano; i++){ \n  \ttablero.push(Array(tamano).fill(null))\n  }\n  return tablero\n}\n\n  // Un nuevo jugador se ha unido a la sala \n  function nuevoJugador(usuarioId){\n  \treturn {usuario:usuarioId, \n\t\t\t\t  \tcanasta: [], \n\t\t\t\t  \tcolumnas: null, \n\t\t\t\t  \tdesconexion: null, \n\t\t\t\t  \ttablero: nuevoTablero(), \n\t\t\t\t  \tbasura: [], \n\t\t\t\t  \tpuntuacion: [0, []]}\n  }\n\nfunction nuevaSala(usuarioId, nombre, esLocal = false){\n  \treturn {\n  \t\tusuarios: [nuevoJugador(usuarioId)], \n  \t\tlocal : esLocal,\n  \t\tsala: nombre,\n  \t\tfichas: [], //Diccionario de fichas\n  \t\tfichasCentro: [], // Fichas que se pueden jugar\n  \t\tronda: 0,\n  \t\tturno: usuarioId,\n  \t\tactivo: false,\n  \t\tprimerTurno: true, //Para manejar requests multiples para terminar una ronda \n  \t\tespera: false //Para manejar desconecciones \n  \t}\n  }\n\nfunction indexesToFichas(arr, fichasDict){\n\tvar newArr = []\n\tfor (const f in arr){\n\t\tnewArr.push(fichasDict[arr[f]])\n\t}\n\treturn newArr\n}\n\nfunction distribuirFichas(salaActual, primerJugador){\n\tvar idx = 0;\n\tfor(var y = 0; y < salaActual[\"usuarios\"].length; y++){\n\t\tif(y == primerJugador){\n\t\t\tfor(let x = 0; x < 6; x++){\n\t\t\t\tidx = Math.floor(Math.random() * salaActual[\"fichasCentro\"].length)\n\t\t\t\tsalaActual[\"usuarios\"][primerJugador][\"canasta\"].push(salaActual[\"fichasCentro\"].splice(idx, 1)[0]);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (let x = 0; x < 3; x++) {\n\t  \t\tidx = Math.floor(Math.random() * salaActual[\"fichasCentro\"].length);\n\t  \t\tsalaActual[\"usuarios\"][y][\"canasta\"].push(salaActual[\"fichasCentro\"].splice(idx, 1)[0]);\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nfunction comenzarJuego(salaActual){\n\tconsole.log(salaActual)\n  salaActual[\"fichas\"] = FICHAS\n  if(salaActual[\"usuarios\"].length < USUARIOS_MIN){ \n  \tconsole.log(`La sala ${salaActual[`sala`]} requiere de un minimo de dos jugadores para poder iniciar un juego.`)\n  \treturn; \n  }\n  if(salaActual[\"activo\"]){\n  \tconsole.log(`Ya se encuentra un juego en curso en la sala ${salaActual[\"sala\"]}`)\n  \treturn;\n  }\n\n  salaActual[\"activo\"] = true\n  //Instanciar las fichas al centro \n  for (const fich in FICHAS){\n  \tsalaActual[\"fichasCentro\"].push(parseInt(fich))\n  }\n\n  \t\t//Distribuir las fechas\n  distribuirFichas(salaActual, 0)\n\n\t if(VERBOSE){\n\t  console.log(salaActual)\n\t}\n\treturn salaActual\n\t  \t\n}\n\n\nfunction bajarFichasYSacarPuntuacion(salaActual, state, socket = \"\"){\n\tif(!salaActual[\"primerTurno\"] || salaActual[\"local\"]){ //como primerTurno solo es para prevenir requests multiples, siempre es falso en salas locales\n  \t\t\tsalaActual[\"primerTurno\"] = false;\n\n  \t\t\t//Manejo de cada usuario en la sala \n\t  \t\tfor(const u in salaActual[\"usuarios\"]){\n\t  \t\t\tvar usuarioActual = salaActual[\"usuarios\"][u]\n\t  \t\t\tif(usuarioActual[\"usuario\"] == socket.id){\n\t\t\t  \t\tusuarioActual[\"canasta\"] = []\n\t\t\t  \t\tusuarioActual[\"columnas\"] = state[\"cols\"]\n\t\t\t  \t\tusuarioActual[\"basura\"] = state[\"basura\"]\n\t  \t\t\t}\n\n\t  \t\t\t// Bajar fichas y sacar puntuacion\n\t  \t\t\tvar fichasBajadas = []\n\t  \t\t\tvar nuevoTablero = clonar(usuarioActual[\"tablero\"])\n\t  \t\t\tfor(const c in usuarioActual[\"columnas\"]){\n\t  \t\t\t\tvar colActual = usuarioActual[\"columnas\"][c]\n\t  \t\t\t\tif(colActual[colActual.length - 1] != null){ //si esta llena la columna\n\t  \t\t\t\t\tconsole.log(\"BAJANDO UNA FICHA\")\n\t  \t\t\t\t\tusuarioActual[\"columnas\"][c] = Array(colActual.length).fill(null) // Se borra la columna \n\t  \t\t\t\t\tif(colActual.length > 1){ //Se regresan las fichas de mas\n\t\t\t  \t\t\t\tsalaActual[\"fichasCentro\"] = salaActual[\"fichasCentro\"].concat(indexesToFichas(colActual.slice(1), salaActual[\"fichas\"]))\n\t\t\t  \t\t\t}\n\t\t  \t\t\t\tfor(const f in nuevoTablero[c]){ // Se bajan las fichas \n\t\t  \t\t\t\t\tif(nuevoTablero[c][f] === null){\n\t\t\t\t\t\t\t\t\tnuevoTablero[c][f] = colActual[0]\n\t\t\t\t\t\t\t\t\tfichasBajadas.push([parseInt(c), parseInt(f)])\n\t\t\t\t\t\t\t\t\tif(f == nuevoTablero[c].length-1){\n\t\t  \t\t\t\t\t\t\tsalaActual[\"activo\"] = false\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t}\n\t\t  \t\t\t\t}\n\t\t  \t\t\t} \n\t  \t\t\t}\n\t  \t\t\tif(VERBOSE){\n\t  \t\t\t\tconsole.log(nuevoTablero)\n\t  \t\t\t}\n\t  \t\t\tusuarioActual[\"tablero\"] = nuevoTablero\n\t  \t\t\tconst puntos = puntuacion.calcularPuntos(usuarioActual, fichasBajadas, usuarioActual[\"basura\"].length)\n\t  \t\t\tusuarioActual[\"puntuacion\"][0] += puntos[0]\n\t  \t\t\tusuarioActual[\"puntuacion\"][1] = puntos[1]\n\t  \t\t\tsalaActual[\"fichasCentro\"] = salaActual[\"fichasCentro\"].concat(indexesToFichas(usuarioActual[\"basura\"], salaActual[\"fichas\"]))\n\t  \t\t\tusuarioActual[\"basura\"] = []\n\t  \t\t\tif(VERBOSE){\n\t  \t\t\t\tconsole.log(`USUARIO ${usuarioActual[\"usuario\"]} TRAS EL FINAL DE LA RONDA: ${usuarioActual}`)\n\t  \t\t\t}\n\t  \t\t}\n\n\t  \t\tsalaActual[\"ronda\"] += 1\n\t  \t\tvar primerJugador = salaActual[\"ronda\"]%salaActual[\"usuarios\"].length\n\t  \t\tsalaActual[\"turno\"] = salaActual[\"usuarios\"][primerJugador][\"usuario\"]\n\n\t  \t\tdistribuirFichas(salaActual, primerJugador);\n\t  \t} else {\n\t  \t\tconsole.log(`ERROR: Ya empezo la siguiente ronda en la sala ${salaActual[\"sala\"]}`)\n\t  \t}\n}\n\n\nmodule.exports = {crearFichas, nuevaSala, nuevoJugador, bajarFichasYSacarPuntuacion, comenzarJuego};"],"mappings":"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"},"metadata":{},"sourceType":"module"}